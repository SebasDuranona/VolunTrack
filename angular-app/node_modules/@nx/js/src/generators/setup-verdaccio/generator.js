"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupVerdaccio = void 0;
const devkit_1 = require("@nx/devkit");
const path = require("path");
const versions_1 = require("../../utils/versions");
const child_process_1 = require("child_process");
async function setupVerdaccio(tree, options) {
    if (!tree.exists('.verdaccio/config.yml')) {
        (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files'), '.verdaccio', {
            npmUplinkRegistry: (0, child_process_1.execSync)('npm config get registry')?.toString()?.trim() ??
                'https://registry.npmjs.org',
        });
    }
    const verdaccioTarget = {
        executor: '@nx/js:verdaccio',
        options: {
            port: 4873,
            config: '.verdaccio/config.yml',
            storage: 'tmp/local-registry/storage',
        },
    };
    if (!tree.exists('project.json')) {
        const { name } = (0, devkit_1.readJson)(tree, 'package.json');
        (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
            if (!json.nx) {
                json.nx = {
                    includedScripts: [],
                };
            }
            return json;
        });
        (0, devkit_1.addProjectConfiguration)(tree, name, {
            root: '.',
            targets: {
                ['local-registry']: verdaccioTarget,
            },
        });
    }
    else {
        // use updateJson instead of updateProjectConfiguration due to unknown project name
        (0, devkit_1.updateJson)(tree, 'project.json', (json) => {
            if (!json.targets) {
                json.targets = {};
            }
            json.targets['local-registry'] ??= verdaccioTarget;
            return json;
        });
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { verdaccio: versions_1.verdaccioVersion });
}
exports.setupVerdaccio = setupVerdaccio;
exports.default = setupVerdaccio;
