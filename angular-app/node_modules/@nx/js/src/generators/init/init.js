"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const semver_1 = require("@nx/devkit/src/utils/semver");
const package_json_1 = require("nx/src/utils/package-json");
const semver_2 = require("semver");
const ts_config_1 = require("../../utils/typescript/ts-config");
const versions_1 = require("../../utils/versions");
const path_1 = require("path");
async function getInstalledTypescriptVersion(tree) {
    const rootPackageJson = (0, devkit_1.readJson)(tree, 'package.json');
    const tsVersionInRootPackageJson = rootPackageJson.devDependencies?.['typescript'] ??
        rootPackageJson.dependencies?.['typescript'];
    if (!tsVersionInRootPackageJson) {
        return null;
    }
    if ((0, semver_2.valid)(tsVersionInRootPackageJson)) {
        // it's a pinned version, return it
        return tsVersionInRootPackageJson;
    }
    // it's a version range, check whether the installed version matches it
    try {
        const tsPackageJson = (0, package_json_1.readModulePackageJson)('typescript').packageJson;
        const installedTsVersion = tsPackageJson.devDependencies?.['typescript'] ??
            tsPackageJson.dependencies?.['typescript'];
        // the installed version matches the package.json version range
        if (installedTsVersion &&
            (0, semver_2.satisfies)(installedTsVersion, tsVersionInRootPackageJson)) {
            return installedTsVersion;
        }
    }
    finally {
        return (0, semver_1.checkAndCleanWithSemver)('typescript', tsVersionInRootPackageJson);
    }
}
async function initGenerator(tree, schema) {
    const tasks = [];
    // add tsconfig.base.json
    if (!(0, ts_config_1.getRootTsConfigFileName)(tree)) {
        (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, './files'), '.', {
            fileName: schema.tsConfigName ?? 'tsconfig.base.json',
        });
    }
    const devDependencies = {
        '@nx/js': versions_1.nxVersion,
        prettier: versions_1.prettierVersion,
        // When loading .ts config files (e.g. webpack.config.ts, jest.config.ts, etc.)
        // we prefer to use SWC, and fallback to ts-node for workspaces that don't use SWC.
        '@swc-node/register': versions_1.swcNodeVersion,
        '@swc/core': versions_1.swcCoreVersion,
        '@swc/helpers': versions_1.swcHelpersVersion,
    };
    if (!schema.js && !schema.keepExistingVersions) {
        const installedTsVersion = await getInstalledTypescriptVersion(tree);
        if (!installedTsVersion ||
            !(0, semver_2.satisfies)(installedTsVersion, versions_1.supportedTypescriptVersions, {
                includePrerelease: true,
            })) {
            devDependencies['typescript'] = versions_1.typescriptVersion;
        }
    }
    // https://prettier.io/docs/en/configuration.html
    const prettierrcNameOptions = [
        '.prettierrc',
        '.prettierrc.json',
        '.prettierrc.yml',
        '.prettierrc.yaml',
        '.prettierrc.json5',
        '.prettierrc.js',
        '.prettierrc.cjs',
        'prettier.config.js',
        'prettier.config.cjs',
        '.prettierrc.toml',
    ];
    if (prettierrcNameOptions.every((name) => !tree.exists(name))) {
        (0, devkit_1.writeJson)(tree, '.prettierrc', {
            singleQuote: true,
        });
    }
    if (!tree.exists(`.prettierignore`)) {
        tree.write('.prettierignore', (0, devkit_1.stripIndents) `
        # Add files here to ignore them from prettier formatting
        /dist
        /coverage
        /.nx/cache
      `);
    }
    if (tree.exists('.vscode/extensions.json')) {
        (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
            json.recommendations ??= [];
            const extension = 'esbenp.prettier-vscode';
            if (!json.recommendations.includes(extension)) {
                json.recommendations.push(extension);
            }
            return json;
        });
    }
    const installTask = !schema.skipPackageJson
        ? (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDependencies, undefined, schema.keepExistingVersions)
        : () => { };
    tasks.push(installTask);
    (0, devkit_1.ensurePackage)('prettier', versions_1.prettierVersion);
    if (!schema.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return async () => {
        for (const task of tasks) {
            await task();
        }
    };
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
