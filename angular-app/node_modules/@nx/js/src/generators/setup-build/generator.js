"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupBuildGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const add_swc_config_1 = require("../../utils/swc/add-swc-config");
const add_swc_dependencies_1 = require("../../utils/swc/add-swc-dependencies");
const versions_1 = require("../../utils/versions");
const add_build_target_defaults_1 = require("@nx/devkit/src/generators/add-build-target-defaults");
async function setupBuildGenerator(tree, options) {
    const tasks = [];
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const buildTarget = options.buildTarget ?? 'build';
    const prevBuildOptions = project.targets?.[buildTarget]?.options;
    project.targets ??= {};
    let mainFile;
    if (prevBuildOptions?.main) {
        mainFile = prevBuildOptions.main;
    }
    else if (options.main) {
        mainFile = options.main;
    }
    else {
        const root = project.sourceRoot ?? project.root;
        for (const f of [
            (0, devkit_1.joinPathFragments)(root, 'main.ts'),
            (0, devkit_1.joinPathFragments)(root, 'main.js'),
            (0, devkit_1.joinPathFragments)(root, 'index.ts'),
            (0, devkit_1.joinPathFragments)(root, 'index.js'),
        ]) {
            if (tree.exists(f)) {
                mainFile = f;
                break;
            }
        }
    }
    if (!mainFile || !tree.exists(mainFile)) {
        throw new Error(`Cannot locate a main file for ${options.project}. Please specify one using --main=<file-path>.`);
    }
    let tsConfigFile;
    if (prevBuildOptions?.tsConfig) {
        tsConfigFile = prevBuildOptions.tsConfig;
    }
    else if (options.tsConfig) {
        tsConfigFile = options.tsConfig;
    }
    else {
        for (const f of [
            'tsconfig.lib.json',
            'tsconfig.app.json',
            'tsconfig.json',
        ]) {
            const candidate = (0, devkit_1.joinPathFragments)(project.root, f);
            if (tree.exists(candidate)) {
                tsConfigFile = candidate;
                break;
            }
        }
    }
    if (!tsConfigFile || !tree.exists(tsConfigFile)) {
        throw new Error(`Cannot locate a tsConfig file for ${options.project}. Please specify one using --tsConfig=<file-path>.`);
    }
    switch (options.bundler) {
        case 'vite': {
            const { viteConfigurationGenerator } = (0, devkit_1.ensurePackage)('@nx/vite', versions_1.nxVersion);
            const task = await viteConfigurationGenerator(tree, {
                buildTarget: options.buildTarget,
                project: options.project,
                newProject: true,
                uiFramework: 'none',
                includeVitest: false,
                includeLib: true,
                skipFormat: true,
            });
            tasks.push(task);
            break;
        }
        case 'esbuild': {
            const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/esbuild', versions_1.nxVersion);
            const task = await configurationGenerator(tree, {
                main: mainFile,
                buildTarget: options.buildTarget,
                project: options.project,
                skipFormat: true,
                skipValidation: true,
            });
            tasks.push(task);
            break;
        }
        case 'rollup': {
            const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/rollup', versions_1.nxVersion);
            const task = await configurationGenerator(tree, {
                buildTarget: options.buildTarget,
                main: mainFile,
                tsConfig: tsConfigFile,
                project: options.project,
                compiler: 'tsc',
                format: ['cjs', 'esm'],
                skipFormat: true,
                skipValidation: true,
            });
            tasks.push(task);
            break;
        }
        case 'tsc': {
            (0, add_build_target_defaults_1.addBuildTargetDefaults)(tree, '@nx/js:tsc');
            const outputPath = (0, devkit_1.joinPathFragments)('dist', project.root);
            project.targets[buildTarget] = {
                executor: `@nx/js:tsc`,
                outputs: ['{options.outputPath}'],
                options: {
                    outputPath,
                    main: mainFile,
                    tsConfig: tsConfigFile,
                    assets: [],
                },
            };
            (0, devkit_1.updateProjectConfiguration)(tree, options.project, project);
            break;
        }
        case 'swc': {
            (0, add_build_target_defaults_1.addBuildTargetDefaults)(tree, '@nx/js:swc');
            const outputPath = (0, devkit_1.joinPathFragments)('dist', project.root);
            project.targets[buildTarget] = {
                executor: `@nx/js:swc`,
                outputs: ['{options.outputPath}'],
                options: {
                    outputPath,
                    main: mainFile,
                    tsConfig: tsConfigFile,
                    assets: [],
                },
            };
            (0, devkit_1.updateProjectConfiguration)(tree, options.project, project);
            (0, add_swc_dependencies_1.addSwcDependencies)(tree);
            (0, add_swc_config_1.addSwcConfig)(tree, project.root, 'es6');
        }
    }
    await (0, devkit_1.formatFiles)(tree);
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.setupBuildGenerator = setupBuildGenerator;
exports.default = setupBuildGenerator;
