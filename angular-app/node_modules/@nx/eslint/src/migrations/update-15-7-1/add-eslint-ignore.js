"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const eslint_targets_1 = require("../../generators/utils/eslint-targets");
const config_file_1 = require("../../utils/config-file");
async function addEslintIgnore(tree) {
    const nxJson = (0, devkit_1.readJson)(tree, 'nx.json');
    const globalEslintFile = config_file_1.ESLINT_CONFIG_FILENAMES.find((file) => tree.exists(file));
    if (globalEslintFile) {
        if (tree.exists('.eslintignore')) {
            const content = tree.read('.eslintignore', 'utf-8');
            if (!content.includes('node_modules')) {
                tree.write('.eslintignore', `node_modules\n${content}`);
            }
        }
        else {
            tree.write('.eslintignore', 'node_modules\n');
        }
        for (const targetName of (0, eslint_targets_1.getEslintTargets)(tree)) {
            nxJson.targetDefaults ??= {};
            const lintTargetDefaults = (nxJson.targetDefaults[targetName] ??= {});
            const lintIgnorePath = (0, devkit_1.joinPathFragments)('{workspaceRoot}', globalEslintFile);
            if (lintTargetDefaults.inputs) {
                if (!lintTargetDefaults.inputs.includes(lintIgnorePath)) {
                    lintTargetDefaults.inputs.push(lintIgnorePath);
                }
            }
            else {
                lintTargetDefaults.inputs = ['default', lintIgnorePath];
            }
        }
        (0, devkit_1.updateNxJson)(tree, nxJson);
        await (0, devkit_1.formatFiles)(tree);
    }
}
exports.default = addEslintIgnore;
