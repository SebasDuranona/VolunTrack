"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lintInitGenerator = exports.initEsLint = void 0;
const devkit_1 = require("@nx/devkit");
const update_package_scripts_1 = require("@nx/devkit/src/utils/update-package-scripts");
const versions_1 = require("../../utils/versions");
const eslint_file_1 = require("../utils/eslint-file");
const plugin_1 = require("../../plugins/plugin");
const plugin_2 = require("../utils/plugin");
function updateProductionFileset(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const productionFileSet = nxJson.namedInputs?.production;
    if (productionFileSet) {
        productionFileSet.push('!{projectRoot}/.eslintrc.json');
        productionFileSet.push('!{projectRoot}/eslint.config.js');
        // Dedupe and set
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function addTargetDefaults(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    nxJson.targetDefaults ??= {};
    nxJson.targetDefaults['@nx/eslint:lint'] ??= {};
    nxJson.targetDefaults['@nx/eslint:lint'].cache ??= true;
    nxJson.targetDefaults['@nx/eslint:lint'].inputs ??= [
        'default',
        `{workspaceRoot}/.eslintrc.json`,
        `{workspaceRoot}/.eslintignore`,
        `{workspaceRoot}/eslint.config.js`,
    ];
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function addPlugin(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    nxJson.plugins ??= [];
    for (const plugin of nxJson.plugins) {
        if (typeof plugin === 'string'
            ? plugin === '@nx/eslint/plugin'
            : plugin.plugin === '@nx/eslint/plugin') {
            return;
        }
    }
    nxJson.plugins.push({
        plugin: '@nx/eslint/plugin',
        options: {
            targetName: 'lint',
        },
    });
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
async function initEsLint(tree, options) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const addPluginDefault = process.env.NX_ADD_PLUGINS !== 'false' &&
        nxJson.useInferencePlugins !== false;
    options.addPlugin ??= addPluginDefault;
    const hasPlugin = (0, plugin_2.hasEslintPlugin)(tree);
    const rootEslintFile = (0, eslint_file_1.findEslintFile)(tree);
    if (rootEslintFile && options.addPlugin && !hasPlugin) {
        addPlugin(tree);
        if (options.updatePackageScripts) {
            await (0, update_package_scripts_1.updatePackageScripts)(tree, plugin_1.createNodes);
        }
        return () => { };
    }
    if (rootEslintFile) {
        return () => { };
    }
    updateProductionFileset(tree);
    if (options.addPlugin) {
        addPlugin(tree);
    }
    else {
        addTargetDefaults(tree);
    }
    const tasks = [];
    if (!options.skipPackageJson) {
        tasks.push((0, devkit_1.removeDependenciesFromPackageJson)(tree, ['@nx/eslint'], []));
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
            '@nx/eslint': versions_1.nxVersion,
            eslint: versions_1.eslintVersion,
        }, undefined, options.keepExistingVersions));
    }
    if (options.updatePackageScripts) {
        await (0, update_package_scripts_1.updatePackageScripts)(tree, plugin_1.createNodes);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.initEsLint = initEsLint;
async function lintInitGenerator(tree, options) {
    return await initEsLint(tree, { addPlugin: false, ...options });
}
exports.lintInitGenerator = lintInitGenerator;
