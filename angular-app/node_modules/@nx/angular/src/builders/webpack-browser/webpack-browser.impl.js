"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeWebpackBrowserBuilder = void 0;
const devkit_1 = require("@nx/devkit");
const webpack_nx_build_coordination_plugin_1 = require("@nx/webpack/src/plugins/webpack-nx-build-coordination-plugin");
const fs_1 = require("fs");
const configuration_1 = require("nx/src/config/configuration");
const operators_1 = require("nx/src/project-graph/operators");
const utils_1 = require("nx/src/tasks-runner/utils");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_2 = require("rxjs/operators");
const buildable_libs_1 = require("../utilities/buildable-libs");
const webpack_1 = require("../utilities/webpack");
function shouldSkipInitialTargetRun(projectGraph, project, target) {
    const nxJson = (0, configuration_1.readNxJson)();
    const defaultDependencyConfigs = Object.entries(nxJson.targetDefaults ?? {}).reduce((acc, [targetName, dependencyConfig]) => {
        acc[targetName] = dependencyConfig.dependsOn;
        return acc;
    }, {});
    const projectDependencyConfigs = (0, utils_1.getDependencyConfigs)({ project, target }, defaultDependencyConfigs, projectGraph);
    // if the task runner already ran the target, skip the initial run
    return projectDependencyConfigs.some((d) => d.target === target && d.projects === 'dependencies');
}
function executeWebpackBrowserBuilder(options, context) {
    options.buildLibsFromSource ??= true;
    const { buildLibsFromSource, customWebpackConfig, indexHtmlTransformer, indexFileTransformer, ...delegateBuilderOptions } = options;
    process.env.NX_BUILD_LIBS_FROM_SOURCE = `${buildLibsFromSource}`;
    process.env.NX_BUILD_TARGET = (0, devkit_1.targetToTargetString)({ ...context.target });
    const pathToWebpackConfig = customWebpackConfig?.path &&
        (0, devkit_1.joinPathFragments)(context.workspaceRoot, customWebpackConfig.path);
    if (pathToWebpackConfig && !(0, fs_1.existsSync)(pathToWebpackConfig)) {
        throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
    }
    const normalizedIndexHtmlTransformer = indexHtmlTransformer ?? indexFileTransformer;
    const pathToIndexFileTransformer = normalizedIndexHtmlTransformer &&
        (0, devkit_1.joinPathFragments)(context.workspaceRoot, normalizedIndexHtmlTransformer);
    if (pathToIndexFileTransformer && !(0, fs_1.existsSync)(pathToIndexFileTransformer)) {
        throw new Error(`File containing Index File Transformer function Not Found!\n Please ensure the path to the file containing the function is correct: \n${pathToIndexFileTransformer}`);
    }
    let dependencies;
    let projectGraph;
    if (!buildLibsFromSource) {
        projectGraph = (0, devkit_1.readCachedProjectGraph)();
        const { tsConfigPath, dependencies: foundDependencies } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(delegateBuilderOptions.tsConfig, context, { projectGraph });
        dependencies = foundDependencies;
        delegateBuilderOptions.tsConfig = (0, devkit_1.normalizePath)((0, path_1.relative)(context.workspaceRoot, tsConfigPath));
    }
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_2.switchMap)(({ executeBrowserBuilder }) => executeBrowserBuilder(delegateBuilderOptions, context, {
        webpackConfiguration: (baseWebpackConfig) => {
            if (!buildLibsFromSource && delegateBuilderOptions.watch) {
                const workspaceDependencies = dependencies
                    .filter((dep) => !(0, operators_1.isNpmProject)(dep.node))
                    .map((dep) => dep.node.name);
                // default for `nx run-many` is --all projects
                // by passing an empty string for --projects, run-many will default to
                // run the target for all projects.
                // This will occur when workspaceDependencies = []
                if (workspaceDependencies.length > 0) {
                    const skipInitialRun = shouldSkipInitialTargetRun(projectGraph, context.target.project, context.target.target);
                    baseWebpackConfig.plugins.push(
                    // @ts-expect-error - difference between angular and webpack plugin definitions bc of webpack versions
                    new webpack_nx_build_coordination_plugin_1.WebpackNxBuildCoordinationPlugin(`nx run-many --target=${context.target.target} --projects=${workspaceDependencies.join(',')}`, skipInitialRun));
                }
            }
            if (!pathToWebpackConfig) {
                return baseWebpackConfig;
            }
            return (0, webpack_1.mergeCustomWebpackConfig)(baseWebpackConfig, pathToWebpackConfig, delegateBuilderOptions, context.target);
        },
        ...(pathToIndexFileTransformer
            ? {
                indexHtml: (0, webpack_1.resolveIndexHtmlTransformer)(pathToIndexFileTransformer, delegateBuilderOptions.tsConfig, context.target),
            }
            : {}),
    })));
}
exports.executeWebpackBrowserBuilder = executeWebpackBrowserBuilder;
exports.default = require('@angular-devkit/architect').createBuilder(executeWebpackBrowserBuilder);
