"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeWebpackServerBuilder = void 0;
const devkit_1 = require("@nx/devkit");
const fs_1 = require("fs");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const buildable_libs_1 = require("../utilities/buildable-libs");
const webpack_1 = require("../utilities/webpack");
const validate_options_1 = require("./validate-options");
function buildServerApp(options, context) {
    const { buildLibsFromSource, customWebpackConfig, ...delegateOptions } = options;
    // If there is a path to custom webpack config
    // Invoke our own support for custom webpack config
    if (customWebpackConfig && customWebpackConfig.path) {
        const pathToWebpackConfig = (0, devkit_1.joinPathFragments)(context.workspaceRoot, customWebpackConfig.path);
        if ((0, fs_1.existsSync)(pathToWebpackConfig)) {
            return buildServerAppWithCustomWebpackConfiguration(delegateOptions, context, pathToWebpackConfig);
        }
        else {
            throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
        }
    }
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_1.switchMap)(({ executeServerBuilder }) => executeServerBuilder(delegateOptions, context)));
}
function buildServerAppWithCustomWebpackConfiguration(options, context, pathToWebpackConfig) {
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_1.switchMap)(({ executeServerBuilder }) => executeServerBuilder(options, context, {
        webpackConfiguration: async (baseWebpackConfig) => {
            // Angular 15 auto includes code from @angular/platform-server
            // This includes the code outside the shared scope created by ModuleFederation
            // This code will be included in the generated code from our generators,
            // maintaining it within the shared scope.
            // Therefore, if the build is an MF Server build, remove the auto-includes from
            // the base webpack config from Angular
            let mergedConfig = await (0, webpack_1.mergeCustomWebpackConfig)(baseWebpackConfig, pathToWebpackConfig, options, context.target);
            if (mergedConfig.plugins
                .map((p) => p.constructor.name)
                .includes('UniversalFederationPlugin')) {
                mergedConfig.entry.main = mergedConfig.entry.main.filter((m) => !m.startsWith('@angular/platform-server/init'));
                mergedConfig.module.rules = mergedConfig.module.rules.filter((m) => !m.loader
                    ? true
                    : !m.loader.endsWith('@angular-devkit/build-angular/src/builders/server/platform-server-exports-loader.js'));
            }
            return mergedConfig;
        },
    })));
}
function executeWebpackServerBuilder(options, context) {
    (0, validate_options_1.validateOptions)(options);
    options.buildLibsFromSource ??= true;
    process.env.NX_BUILD_LIBS_FROM_SOURCE = `${options.buildLibsFromSource}`;
    process.env.NX_BUILD_TARGET = (0, devkit_1.targetToTargetString)({ ...context.target });
    if (!options.buildLibsFromSource) {
        const { tsConfigPath } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(options.tsConfig, context);
        options.tsConfig = (0, devkit_1.normalizePath)((0, path_1.relative)(context.workspaceRoot, tsConfigPath));
    }
    return buildServerApp(options, context);
}
exports.executeWebpackServerBuilder = executeWebpackServerBuilder;
exports.default = require('@angular-devkit/architect').createBuilder(executeWebpackServerBuilder);
