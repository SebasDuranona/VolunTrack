"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const versions_1 = require("../../utils/versions");
const semver_1 = require("@nx/devkit/src/utils/semver");
const semver_2 = require("semver");
async function switchToJasmineMarbles(tree) {
    const usesJasmineMarbles = await replaceJasmineMarbleUsagesInFiles(tree);
    addJasmineMarblesDevDependencyIfUsed(tree, usesJasmineMarbles);
}
exports.default = switchToJasmineMarbles;
async function replaceJasmineMarbleUsagesInFiles(tree) {
    let usesJasmineMarbles = false;
    const projectGraph = await (() => {
        try {
            return (0, devkit_1.readCachedProjectGraph)();
        }
        catch {
            return (0, devkit_1.createProjectGraphAsync)();
        }
    })();
    const dirsToTraverse = Object.entries(projectGraph.dependencies)
        .filter(([node, dep]) => dep.some(({ target }) => target === 'npm:@nrwl/angular' && !projectGraph.externalNodes?.[node]))
        .map(([projectName]) => (0, devkit_1.readProjectConfiguration)(tree, projectName).root);
    for (const dir of dirsToTraverse) {
        (0, devkit_1.visitNotIgnoredFiles)(tree, dir, (path) => {
            if ((0, path_1.extname)(path) !== '.ts') {
                return;
            }
            const fileContents = tree.read(path, 'utf-8');
            if (!fileContents.includes('@nrwl/angular/testing')) {
                return;
            }
            const NRWL_ANGULAR_TESTING_IMPORT_SELECTOR = 'ImportDeclaration:has(StringLiteral[value="@nrwl/angular/testing"])';
            const ast = tsquery_1.tsquery.ast(fileContents);
            const nrwlAngularTestingImportNodes = (0, tsquery_1.tsquery)(ast, NRWL_ANGULAR_TESTING_IMPORT_SELECTOR, { visitAllChildren: true });
            if (!nrwlAngularTestingImportNodes ||
                nrwlAngularTestingImportNodes.length === 0) {
                return;
            }
            const jasmineMarblesExportsRegex = new RegExp(/(hot|cold|getTestScheduler|time)/);
            if (!jasmineMarblesExportsRegex.test(nrwlAngularTestingImportNodes[0].getText())) {
                return;
            }
            const IMPORT_SPECIFIERS_SELECTOR = 'NamedImports > ImportSpecifier';
            const importSpecifierNodes = (0, tsquery_1.tsquery)(nrwlAngularTestingImportNodes[0], IMPORT_SPECIFIERS_SELECTOR, { visitAllChildren: true });
            if (!importSpecifierNodes || importSpecifierNodes.length === 0) {
                return;
            }
            const validNrwlTestingImports = [];
            const validJasmineMarbleImports = [];
            for (const node of importSpecifierNodes) {
                const importSymbol = node.getText();
                if (jasmineMarblesExportsRegex.test(importSymbol)) {
                    validJasmineMarbleImports.push(importSymbol);
                }
                else {
                    validNrwlTestingImports.push(importSymbol);
                }
            }
            if (!usesJasmineMarbles && validJasmineMarbleImports.length > 0) {
                usesJasmineMarbles = true;
            }
            const newFileContents = `${fileContents.slice(0, nrwlAngularTestingImportNodes[0].getStart())}${validNrwlTestingImports.length > 0
                ? `import {${validNrwlTestingImports.join(',')}} from '@nrwl/angular/testing';`
                : ''}
    ${validJasmineMarbleImports.length > 0
                ? `import {${validJasmineMarbleImports.join(',')}} from 'jasmine-marbles';${fileContents.slice(nrwlAngularTestingImportNodes[0].getEnd(), -1)}`
                : ''}`;
            tree.write(path, newFileContents);
        });
    }
    return usesJasmineMarbles;
}
function addJasmineMarblesDevDependencyIfUsed(tree, usesJasmineMarbles) {
    if (!usesJasmineMarbles) {
        return;
    }
    const pkgJson = (0, devkit_1.readJson)(tree, 'package.json');
    const jasmineMarblesDependency = pkgJson.dependencies['jasmine-marbles'];
    const jasmineMarblesDevDependency = pkgJson.devDependencies['jasmine-marbles'];
    if (jasmineMarblesDependency || jasmineMarblesDevDependency) {
        return;
    }
    const jasmineMarblesVersion = getJasmineMarblesVersion(tree);
    (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
        'jasmine-marbles': jasmineMarblesVersion,
    });
}
function getJasmineMarblesVersion(tree) {
    let rxjsVersion;
    try {
        const { dependencies, devDependencies } = (0, devkit_1.readJson)(tree, 'package.json');
        rxjsVersion = (0, semver_1.checkAndCleanWithSemver)('rxjs', dependencies?.rxjs ?? devDependencies?.rxjs);
    }
    catch {
        rxjsVersion = (0, semver_1.checkAndCleanWithSemver)('rxjs', versions_1.rxjsVersion);
    }
    return (0, semver_2.gte)(rxjsVersion, '7.0.0') ? versions_1.jasmineMarblesVersion : '~0.8.3';
}
