"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
async function default_1(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const karmaTargets = getKarmaTargetNames(tree);
    const hasProductionFileset = !!nxJson.namedInputs?.production;
    if (karmaTargets.size > 0 && hasProductionFileset) {
        const productionFileset = new Set(nxJson.namedInputs.production);
        for (const exclusion of [
            '!{projectRoot}/**/*.spec.[jt]s',
            '!{projectRoot}/tsconfig.spec.json',
            '!{projectRoot}/karma.conf.js',
        ]) {
            productionFileset.add(exclusion);
        }
        nxJson.namedInputs.production = Array.from(productionFileset);
    }
    for (const targetName of karmaTargets) {
        nxJson.targetDefaults ??= {};
        const jestTargetDefaults = (nxJson.targetDefaults[targetName] ??= {});
        jestTargetDefaults.inputs ??= [
            'default',
            hasProductionFileset ? '^production' : '^default',
            ...(tree.exists('karma.conf.js')
                ? ['{workspaceRoot}/karma.conf.js']
                : []),
        ];
    }
    (0, devkit_1.updateNxJson)(tree, nxJson);
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = default_1;
function getKarmaTargetNames(tree) {
    const karmaTargetNames = new Set();
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@angular-devkit/build-angular:karma', (_, __, target) => {
        karmaTargetNames.add(target);
    });
    return karmaTargetNames;
}
