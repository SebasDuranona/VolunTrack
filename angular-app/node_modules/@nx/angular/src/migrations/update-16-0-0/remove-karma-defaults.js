"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const GENERATORS = ['application', 'library', 'host', 'remote'];
const CANDIDATE_GENERATOR_COLLECTIONS = ['@nrwl/angular', '@nx/angular'];
async function removeKarmaDefaults(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (nxJson.generators) {
        const updatedConfig = updateUnitTestRunner(nxJson.generators);
        if (updatedConfig) {
            (0, devkit_1.updateNxJson)(tree, nxJson);
        }
    }
    const projects = (0, devkit_1.getProjects)(tree);
    for (const [projectName, projectConfig] of projects) {
        if (projectConfig.generators) {
            const updatedProject = updateUnitTestRunner(projectConfig.generators);
            if (updatedProject) {
                (0, devkit_1.updateProjectConfiguration)(tree, projectName, projectConfig);
            }
        }
    }
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = removeKarmaDefaults;
function updateUnitTestRunner(generatorsConfig) {
    const generators = Object.entries(generatorsConfig);
    let updatedConfig = false;
    for (const [generatorName, generatorDefaults] of generators) {
        if (CANDIDATE_GENERATOR_COLLECTIONS.includes(generatorName)) {
            for (const possibleGenerator of GENERATORS) {
                if (generatorDefaults[possibleGenerator] &&
                    generatorDefaults[possibleGenerator]['unitTestRunner'] &&
                    generatorDefaults[possibleGenerator]['unitTestRunner'] === 'karma') {
                    generatorsConfig[generatorName][possibleGenerator]['unitTestRunner'] =
                        undefined;
                    updatedConfig = true;
                }
            }
        }
        if (!GENERATORS.map((v) => `@nrwl/angular:${v}`).includes(generatorName) &&
            !GENERATORS.map((v) => `@nx/angular:${v}`).includes(generatorName)) {
            continue;
        }
        if (generatorDefaults['unitTestRunner'] &&
            generatorDefaults['unitTestRunner'] === 'karma') {
            generatorsConfig[generatorName]['unitTestRunner'] = undefined;
            updatedConfig = true;
        }
    }
    return updatedConfig;
}
