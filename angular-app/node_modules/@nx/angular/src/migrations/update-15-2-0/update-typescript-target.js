"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
function updateTarget(tree, tsconfigPath) {
    (0, devkit_1.updateJson)(tree, tsconfigPath, (json) => ({
        ...json,
        compilerOptions: {
            ...(json.compilerOptions ?? {}),
            target: 'ES2022',
            useDefineForClassFields: false,
        },
    }));
}
async function updateTypescriptTarget(tree) {
    const projects = (0, devkit_1.getProjects)(tree);
    for (const [, project] of projects) {
        if (!project.targets)
            continue;
        for (const [, target] of Object.entries(project.targets)) {
            // Update all other known CLI builders that use a tsconfig
            const tsConfigs = [
                target.options || {},
                ...Object.values(target.configurations || {}),
            ]
                .filter((opt) => typeof opt?.tsConfig === 'string')
                .map((opt) => opt.tsConfig);
            const uniqueTsConfigs = [...new Set(tsConfigs)];
            if (uniqueTsConfigs.length < 1) {
                continue;
            }
            const supportedExecutors = new Set([
                workspace_models_1.Builders.Server,
                workspace_models_1.Builders.Karma,
                workspace_models_1.Builders.Browser,
                workspace_models_1.Builders.NgPackagr,
                '@nrwl/angular:webpack-browser',
                '@nrwl/angular:ng-packagr-lite',
                '@nrwl/angular:package',
                '@nrwl/angular:delegate-build',
                '@nrwl/jest:jest',
            ]);
            if (supportedExecutors.has(target.executor)) {
                for (const tsConfig of uniqueTsConfigs) {
                    updateTarget(tree, tsConfig);
                }
            }
        }
    }
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = updateTypescriptTarget;
