"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const child_process_1 = require("child_process");
const path_1 = require("path");
const version_utils_1 = require("../../generators/utils/version-utils");
const version_utils_2 = require("../../utils/version-utils");
async function default_1(tree) {
    const packagesToInstall = [
        '@angular-devkit/core',
        '@angular-devkit/schematics',
        '@schematics/angular',
    ];
    const pkgJson = (0, devkit_1.readJson)(tree, 'package.json');
    const angularMajorVersion = (0, version_utils_1.getInstalledAngularMajorVersion)(tree);
    const angularDevkitVersion = (0, version_utils_2.getPkgVersionForAngularMajorVersion)('angularDevkitVersion', angularMajorVersion);
    const angularCliVersion = pkgJson.devDependencies?.['@angular-devkit/build-angular'] ??
        pkgJson.dependencies?.['@angular-devkit/build-angular'] ??
        angularDevkitVersion;
    const filteredPackages = packagesToInstall
        .filter((pkg) => !pkgJson.devDependencies?.[pkg] && !pkgJson.dependencies?.[pkg])
        .reduce((allPkgs, pkg) => ({ ...allPkgs, [pkg]: angularCliVersion }), {});
    // even though we are going to install the packages directly, we still want
    // to add them to the tree so the migrate command knows changes were made
    (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { ...filteredPackages });
    // we need to install them immediately so the packages are available for
    // other migrations that might be using them
    pkgJson.devDependencies ??= {};
    Object.entries(filteredPackages).forEach(([pkg, version]) => {
        pkgJson.devDependencies[pkg] = version;
    });
    (0, devkit_1.writeJsonFile)((0, path_1.join)(tree.root, 'package.json'), pkgJson);
    const pmc = (0, devkit_1.getPackageManagerCommand)();
    (0, child_process_1.execSync)(pmc.install, { stdio: [0, 1, 2] });
}
exports.default = default_1;
