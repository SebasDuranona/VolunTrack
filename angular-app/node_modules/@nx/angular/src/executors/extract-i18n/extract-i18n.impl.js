"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const ngcli_adapter_1 = require("nx/src/adapter/ngcli-adapter");
const project_graph_1 = require("nx/src/project-graph/project-graph");
const angular_version_utils_1 = require("../utilities/angular-version-utils");
const patch_builder_context_1 = require("../utilities/patch-builder-context");
async function* extractI18nExecutor(options, context) {
    const parsedBuildTarget = (0, devkit_1.parseTargetString)(options.buildTarget, context);
    const browserTargetProjectConfiguration = (0, project_graph_1.readCachedProjectConfiguration)(parsedBuildTarget.project);
    const buildTarget = browserTargetProjectConfiguration.targets[parsedBuildTarget.target];
    const isUsingEsbuildBuilder = [
        '@angular-devkit/build-angular:application',
        '@angular-devkit/build-angular:browser-esbuild',
        '@nx/angular:application',
        '@nx/angular:browser-esbuild',
    ].includes(buildTarget.executor);
    const builderContext = await (0, ngcli_adapter_1.createBuilderContext)({
        builderName: 'extrct-i18n',
        description: 'Extracts i18n messages from source code.',
        optionSchema: await Promise.resolve().then(() => require('./schema.json')),
    }, context);
    /**
     * The Angular CLI extract-i18n builder make some decisions based on the build
     * target builder but it only considers `@angular-devkit/build-angular:*`
     * builders. Since we are using a custom builder, we patch the context to
     * handle `@nx/angular:*` executors.
     */
    (0, patch_builder_context_1.patchBuilderContext)(builderContext, isUsingEsbuildBuilder, parsedBuildTarget);
    const { executeExtractI18nBuilder } = await Promise.resolve().then(() => require('@angular-devkit/build-angular'));
    const delegateBuilderOptions = getDelegateBuilderOptions(options);
    return await executeExtractI18nBuilder(delegateBuilderOptions, builderContext);
}
exports.default = extractI18nExecutor;
function getDelegateBuilderOptions(options) {
    const delegateBuilderOptions = { ...options };
    const { major: angularMajorVersion } = (0, angular_version_utils_1.getInstalledAngularVersionInfo)();
    if (angularMajorVersion <= 17) {
        delegateBuilderOptions.browserTarget = delegateBuilderOptions.buildTarget;
        delete delegateBuilderOptions.buildTarget;
    }
    return delegateBuilderOptions;
}
