"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNgPackagrInstance = void 0;
const ng_packagr_1 = require("ng-packagr");
const angular_version_utils_1 = require("../../utilities/angular-version-utils");
async function getNgPackagrInstance(options) {
    const { major: angularMajorVersion } = (0, angular_version_utils_1.getInstalledAngularVersionInfo)();
    if (angularMajorVersion >= 17) {
        const { WRITE_BUNDLES_TRANSFORM } = await Promise.resolve().then(() => require('./v17+/ng-package/entry-point/write-bundles.di'));
        const { WRITE_PACKAGE_TRANSFORM } = await Promise.resolve().then(() => require('./v17+/ng-package/entry-point/write-package.di'));
        const { STYLESHEET_PROCESSOR } = await Promise.resolve().then(() => require('../../utilities/ng-packagr/stylesheet-processor.di'));
        const packagr = (0, ng_packagr_1.ngPackagr)();
        packagr.withProviders([
            WRITE_BUNDLES_TRANSFORM,
            WRITE_PACKAGE_TRANSFORM,
            STYLESHEET_PROCESSOR,
        ]);
        return packagr;
    }
    const { NX_ENTRY_POINT_PROVIDERS } = await Promise.resolve().then(() => require('./pre-v17/ng-package/entry-point/entry-point.di'));
    const { nxProvideOptions } = await Promise.resolve().then(() => require('./pre-v17/ng-package/options.di'));
    const { NX_PACKAGE_PROVIDERS, NX_PACKAGE_TRANSFORM } = await Promise.resolve().then(() => require('./pre-v17/ng-package/package.di'));
    const packagr = new ng_packagr_1.NgPackagr([
        ...NX_PACKAGE_PROVIDERS,
        ...NX_ENTRY_POINT_PROVIDERS,
        nxProvideOptions({
            tailwindConfig: options.tailwindConfig,
            watch: options.watch,
        }),
    ]);
    packagr.withBuildTransform(NX_PACKAGE_TRANSFORM.provide);
    return packagr;
}
exports.getNgPackagrInstance = getNgPackagrInstance;
