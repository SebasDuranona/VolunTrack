"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageExecutor = exports.createLibraryExecutor = void 0;
const rxjs_for_await_1 = require("@nx/devkit/src/utils/rxjs-for-await");
const buildable_libs_utils_1 = require("@nx/js/src/utils/buildable-libs-utils");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const typescript_1 = require("../utilities/typescript");
const ng_packagr_1 = require("./ng-packagr-adjustments/ng-packagr");
async function initializeNgPackagr(options, context, projectDependencies) {
    const ngPackagr = await (0, ng_packagr_1.getNgPackagrInstance)(options);
    ngPackagr.forProject((0, path_1.resolve)(context.root, options.project));
    if (options.tsConfig) {
        const remappedTsConfigFilePath = (0, buildable_libs_utils_1.createTmpTsConfig)(options.tsConfig, context.root, context.projectsConfigurations.projects[context.projectName].root, projectDependencies);
        const tsConfig = await (0, typescript_1.parseRemappedTsConfigAndMergeDefaults)(context.root, options.tsConfig, remappedTsConfigFilePath);
        ngPackagr.withTsConfig(tsConfig);
    }
    return ngPackagr;
}
/**
 * Creates an executor function that executes the library build of an Angular
 * package using ng-packagr.
 * @param initializeNgPackagr function that returns an ngPackagr instance to use for the build.
 */
function createLibraryExecutor(initializeNgPackagr) {
    return async function* (options, context) {
        const { target, dependencies, topLevelDependencies } = (0, buildable_libs_utils_1.calculateProjectBuildableDependencies)(context.taskGraph, context.projectGraph, context.root, context.projectName, context.targetName, context.configurationName);
        if (!(0, buildable_libs_utils_1.checkDependentProjectsHaveBeenBuilt)(context.root, context.projectName, context.targetName, dependencies)) {
            return Promise.resolve({ success: false });
        }
        if (options.watch) {
            return yield* (0, rxjs_for_await_1.eachValueFrom)((0, rxjs_1.from)(initializeNgPackagr(options, context, dependencies)).pipe((0, operators_1.switchMap)((packagr) => packagr.watch()), (0, operators_1.mapTo)({ success: true })));
        }
        return (0, rxjs_1.from)(initializeNgPackagr(options, context, dependencies))
            .pipe((0, operators_1.switchMap)((packagr) => packagr.build()), (0, operators_1.mapTo)({ success: true }))
            .toPromise();
    };
}
exports.createLibraryExecutor = createLibraryExecutor;
exports.packageExecutor = createLibraryExecutor(initializeNgPackagr);
exports.default = exports.packageExecutor;
