"use strict";
/**
 * Adapted from a private function at ng-packagr
 * https://github.com/ng-packagr/ng-packagr/blob/main/src/lib/ts/tsconfig.ts#L12:
 *
 * Changes made:
 * - Added an extra function that updates the configFilePath in the returned parsed options
 * to be the original tsconfig file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRemappedTsConfigAndMergeDefaults = void 0;
const path_1 = require("path");
const ts = require("typescript");
const ng_compiler_cli_1 = require("./ng-compiler-cli");
async function readDefaultTsConfig(fileName) {
    // these options are mandatory
    const extraOptions = {
        target: ts.ScriptTarget.ES2020,
        experimentalDecorators: true,
        // sourcemaps
        sourceMap: false,
        inlineSources: true,
        inlineSourceMap: true,
        outDir: '',
        declaration: true,
        // ng compiler to options
        enableResourceInlining: true,
        // these are required to set the appropriate EmitFlags
        flatModuleId: 'AUTOGENERATED',
        flatModuleOutFile: 'AUTOGENERATED',
    };
    const { readConfiguration } = await (0, ng_compiler_cli_1.ngCompilerCli)();
    return readConfiguration(fileName, extraOptions);
}
/**
 * Proxy function that ensures the configFilePath option points to the original file path.
 */
async function parseRemappedTsConfigAndMergeDefaults(workspaceRoot, originalFilePath, remappedFilePath) {
    const parsedConfiguration = await readDefaultTsConfig(remappedFilePath);
    parsedConfiguration.options.configFilePath = (0, path_1.resolve)(workspaceRoot, originalFilePath);
    return parsedConfiguration;
}
exports.parseRemappedTsConfigAndMergeDefaults = parseRemappedTsConfigAndMergeDefaults;
