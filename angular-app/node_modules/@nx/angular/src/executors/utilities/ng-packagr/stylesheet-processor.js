"use strict";
/**
 * Adapted from the original ng-packagr source.
 *
 * Changes made:
 * - Use our own function to get the TailwindCSS config path to support a
 * config at the root of the workspace.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncStylesheetProcessor = exports.StylesheetProcessor = exports.CssUrl = void 0;
const browserslist = require("browserslist");
const fs_1 = require("fs");
const path_1 = require("path");
const Piscina = require('piscina');
const color_1 = require("ng-packagr/lib/utils/color");
// using this instead of the one from ng-packagr
const tailwindcss_1 = require("./tailwindcss");
const devkit_1 = require("@nx/devkit");
const semver_1 = require("semver");
const angular_version_utils_1 = require("../angular-version-utils");
const maxWorkersVariable = process.env['NG_BUILD_MAX_WORKERS'];
const maxThreads = typeof maxWorkersVariable === 'string' && maxWorkersVariable !== ''
    ? +maxWorkersVariable
    : 4;
var CssUrl;
(function (CssUrl) {
    CssUrl["inline"] = "inline";
    CssUrl["none"] = "none";
})(CssUrl || (exports.CssUrl = CssUrl = {}));
class StylesheetProcessor {
    constructor(projectBasePath, basePath, cssUrl, includePaths, cacheDirectory) {
        this.projectBasePath = projectBasePath;
        this.basePath = basePath;
        this.cssUrl = cssUrl;
        this.includePaths = includePaths;
        this.cacheDirectory = cacheDirectory;
        // By default, browserslist defaults are too inclusive
        // https://github.com/browserslist/browserslist/blob/83764ea81ffaa39111c204b02c371afa44a4ff07/index.js#L516-L522
        // We change the default query to browsers that Angular support.
        // https://angular.io/guide/browser-support
        browserslist.defaults = [
            'last 2 Chrome versions',
            'last 1 Firefox version',
            'last 2 Edge major versions',
            'last 2 Safari major versions',
            'last 2 iOS major versions',
            'Firefox ESR',
        ];
    }
    async process({ filePath, content, }) {
        this.createRenderWorker();
        return this.renderWorker.run({ content, filePath });
    }
    /** Destory workers in pool. */
    destroy() {
        void this.renderWorker?.destroy();
    }
    createRenderWorker() {
        if (this.renderWorker) {
            return;
        }
        const styleIncludePaths = [...this.includePaths];
        let prevDir = null;
        let currentDir = this.basePath;
        while (currentDir !== prevDir) {
            const p = (0, path_1.join)(currentDir, 'node_modules');
            if ((0, fs_1.existsSync)(p)) {
                styleIncludePaths.push(p);
            }
            prevDir = currentDir;
            currentDir = (0, path_1.dirname)(prevDir);
        }
        const browserslistData = browserslist(undefined, { path: this.basePath });
        const { version: ngPackagrVersion } = (0, angular_version_utils_1.getInstalledPackageVersionInfo)('ng-packagr');
        let postcssConfiguration;
        if ((0, semver_1.gte)(ngPackagrVersion, '17.3.0')) {
            const { loadPostcssConfiguration, } = require('ng-packagr/lib/styles/postcss-configuration');
            postcssConfiguration = loadPostcssConfiguration(this.projectBasePath);
        }
        this.renderWorker = new Piscina({
            filename: require.resolve('ng-packagr/lib/styles/stylesheet-processor-worker'),
            maxThreads,
            recordTiming: false,
            env: {
                ...process.env,
                FORCE_COLOR: '' + color_1.colors.enabled,
            },
            workerData: {
                postcssConfiguration,
                tailwindConfigPath: (0, tailwindcss_1.getTailwindConfigPath)(this.projectBasePath, devkit_1.workspaceRoot),
                projectBasePath: this.projectBasePath,
                browserslistData,
                targets: transformSupportedBrowsersToTargets(browserslistData),
                cacheDirectory: this.cacheDirectory,
                cssUrl: this.cssUrl,
                styleIncludePaths,
            },
        });
    }
}
exports.StylesheetProcessor = StylesheetProcessor;
/**
 * This class is used when ng-packagr version is 17.2.0. The async `loadPostcssConfiguration` function
 * introduced in ng-packagr 17.2.0 causes a memory leak due to multiple workers being created. We must
 * keep this class to support any workspace that might be using ng-packagr 17.2.0 where that function
 * need to be awaited.
 */
class AsyncStylesheetProcessor {
    constructor(projectBasePath, basePath, cssUrl, includePaths, cacheDirectory) {
        this.projectBasePath = projectBasePath;
        this.basePath = basePath;
        this.cssUrl = cssUrl;
        this.includePaths = includePaths;
        this.cacheDirectory = cacheDirectory;
        // By default, browserslist defaults are too inclusive
        // https://github.com/browserslist/browserslist/blob/83764ea81ffaa39111c204b02c371afa44a4ff07/index.js#L516-L522
        // We change the default query to browsers that Angular support.
        // https://angular.io/guide/browser-support
        browserslist.defaults = [
            'last 2 Chrome versions',
            'last 1 Firefox version',
            'last 2 Edge major versions',
            'last 2 Safari major versions',
            'last 2 iOS major versions',
            'Firefox ESR',
        ];
    }
    async process({ filePath, content, }) {
        await this.createRenderWorker();
        return this.renderWorker.run({ content, filePath });
    }
    /** Destory workers in pool. */
    destroy() {
        void this.renderWorker?.destroy();
    }
    async createRenderWorker() {
        if (this.renderWorker) {
            return;
        }
        const styleIncludePaths = [...this.includePaths];
        let prevDir = null;
        let currentDir = this.basePath;
        while (currentDir !== prevDir) {
            const p = (0, path_1.join)(currentDir, 'node_modules');
            if ((0, fs_1.existsSync)(p)) {
                styleIncludePaths.push(p);
            }
            prevDir = currentDir;
            currentDir = (0, path_1.dirname)(prevDir);
        }
        const browserslistData = browserslist(undefined, { path: this.basePath });
        const { version: ngPackagrVersion } = (0, angular_version_utils_1.getInstalledPackageVersionInfo)('ng-packagr');
        let postcssConfiguration;
        if (ngPackagrVersion === '17.2.0') {
            const { loadPostcssConfiguration } = await Promise.resolve().then(() => require('ng-packagr/lib/styles/postcss-configuration'));
            postcssConfiguration = await loadPostcssConfiguration(this.projectBasePath);
        }
        this.renderWorker = new Piscina({
            filename: require.resolve('ng-packagr/lib/styles/stylesheet-processor-worker'),
            maxThreads,
            recordTiming: false,
            env: {
                ...process.env,
                FORCE_COLOR: '' + color_1.colors.enabled,
            },
            workerData: {
                postcssConfiguration,
                tailwindConfigPath: (0, tailwindcss_1.getTailwindConfigPath)(this.projectBasePath, devkit_1.workspaceRoot),
                projectBasePath: this.projectBasePath,
                browserslistData,
                targets: transformSupportedBrowsersToTargets(browserslistData),
                cacheDirectory: this.cacheDirectory,
                cssUrl: this.cssUrl,
                styleIncludePaths,
            },
        });
    }
}
exports.AsyncStylesheetProcessor = AsyncStylesheetProcessor;
function transformSupportedBrowsersToTargets(supportedBrowsers) {
    const transformed = [];
    // https://esbuild.github.io/api/#target
    const esBuildSupportedBrowsers = new Set([
        'safari',
        'firefox',
        'edge',
        'chrome',
        'ios',
    ]);
    for (const browser of supportedBrowsers) {
        let [browserName, version] = browser.split(' ');
        // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`
        if (browserName === 'ios_saf') {
            browserName = 'ios';
        }
        // browserslist uses ranges `15.2-15.3` versions but only the lowest is required
        // to perform minimum supported feature checks. esbuild also expects a single version.
        [version] = version.split('-');
        if (esBuildSupportedBrowsers.has(browserName)) {
            if (browserName === 'safari' && version === 'tp') {
                // esbuild only supports numeric versions so `TP` is converted to a high number (999) since
                // a Technology Preview (TP) of Safari is assumed to support all currently known features.
                version = '999';
            }
            transformed.push(browserName + version);
        }
    }
    return transformed.length ? transformed : undefined;
}
