"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
const semver_1 = require("semver");
const angular_version_utils_1 = require("../../utilities/angular-version-utils");
function validateOptions(options) {
    const { major: angularMajorVersion, version: angularVersion } = (0, angular_version_utils_1.getInstalledAngularVersionInfo)();
    if (angularMajorVersion < 17) {
        throw new Error(`The "application" executor requires Angular version 17 or greater. You are currently using version ${angularVersion}.`);
    }
    if ((0, semver_1.lt)(angularVersion, '17.1.0')) {
        if (options.loader) {
            throw new Error(`The "loader" option requires Angular version 17.1.0 or greater. You are currently using version ${angularVersion}.`);
        }
        if (options.indexHtmlTransformer) {
            throw new Error(`The "indexHtmlTransformer" option requires Angular version 17.1.0 or greater. You are currently using version ${angularVersion}.`);
        }
        if (typeof options.index === 'object' &&
            options.index.preloadInitial !== undefined) {
            throw new Error(`The "index.preloadInitial" option requires Angular version 17.1.0 or greater. You are currently using version ${angularVersion}.`);
        }
        if (options.optimization &&
            typeof options.optimization !== 'boolean' &&
            options.optimization.styles &&
            typeof options.optimization.styles !== 'boolean') {
            if (options.optimization.styles.removeSpecialComments === false) {
                throw new Error(`The "optimization.styles.removeSpecialComments" option requires Angular version 17.1.0 or greater. You are currently using version ${angularVersion}.`);
            }
            else if (options.optimization.styles.removeSpecialComments === true) {
                // silently remove the option, as it was the default before 17.1.0
                delete options.optimization.styles.removeSpecialComments;
            }
        }
        if (typeof options.outputPath === 'object') {
            throw new Error(`The "outputPath" option as an object requires Angular version 17.1.0 or greater. You are currently using version ${angularVersion}.`);
        }
    }
    if ((0, semver_1.lt)(angularVersion, '17.2.0')) {
        if (options.define) {
            throw new Error(`The "define" option requires Angular version 17.2.0 or greater. You are currently using version ${angularVersion}.`);
        }
        if (options.clearScreen !== undefined) {
            throw new Error(`The "clearScreen" option requires Angular version 17.2.0 or greater. You are currently using version ${angularVersion}.`);
        }
    }
    if ((0, semver_1.lt)(angularVersion, '17.3.0')) {
        if (options.deployUrl) {
            throw new Error(`The "deployUrl" option requires Angular version 17.3.0 or greater. You are currently using version ${angularVersion}.`);
        }
    }
}
exports.validateOptions = validateOptions;
