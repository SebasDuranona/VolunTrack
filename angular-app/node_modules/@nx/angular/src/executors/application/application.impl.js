"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ngcli_adapter_1 = require("nx/src/adapter/ngcli-adapter");
const semver_1 = require("semver");
const angular_version_utils_1 = require("../utilities/angular-version-utils");
const buildable_libs_1 = require("../utilities/buildable-libs");
const esbuild_extensions_1 = require("../utilities/esbuild-extensions");
const validate_options_1 = require("./utils/validate-options");
async function* applicationExecutor(options, context) {
    (0, validate_options_1.validateOptions)(options);
    const { buildLibsFromSource = true, plugins: pluginPaths, indexHtmlTransformer: indexHtmlTransformerPath, ...delegateExecutorOptions } = options;
    let dependencies;
    if (!buildLibsFromSource) {
        const { tsConfigPath, dependencies: foundDependencies } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(delegateExecutorOptions.tsConfig, context);
        dependencies = foundDependencies;
        delegateExecutorOptions.tsConfig = tsConfigPath;
    }
    const plugins = await (0, esbuild_extensions_1.loadPlugins)(pluginPaths, options.tsConfig);
    const indexHtmlTransformer = indexHtmlTransformerPath
        ? await (0, esbuild_extensions_1.loadIndexHtmlTransformer)(indexHtmlTransformerPath, options.tsConfig)
        : undefined;
    const { buildApplication } = await Promise.resolve().then(() => require('@angular-devkit/build-angular'));
    const builderContext = await (0, ngcli_adapter_1.createBuilderContext)({
        builderName: 'application',
        description: 'Build an application.',
        optionSchema: await Promise.resolve().then(() => require('./schema.json')),
    }, context);
    const { version: angularVersion } = (0, angular_version_utils_1.getInstalledAngularVersionInfo)();
    if ((0, semver_1.gte)(angularVersion, '17.1.0')) {
        return yield* buildApplication(delegateExecutorOptions, builderContext, {
            codePlugins: plugins,
            indexHtmlTransformer,
        });
    }
    return yield* buildApplication(delegateExecutorOptions, builderContext, plugins);
}
exports.default = applicationExecutor;
