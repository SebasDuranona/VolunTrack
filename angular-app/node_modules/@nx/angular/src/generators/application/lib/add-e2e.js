"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addE2e = void 0;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../../utils/versions");
const version_utils_1 = require("../../utils/version-utils");
async function addE2e(tree, options) {
    // since e2e are separate projects, default to adding plugins
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const addPlugin = process.env.NX_ADD_PLUGINS !== 'false' &&
        nxJson.useInferencePlugins !== false;
    if (options.e2eTestRunner === 'cypress') {
        const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
        // TODO: This can call `@nx/web:static-config` generator when ready
        addFileServerTarget(tree, options, 'serve-static');
        (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
            projectType: 'application',
            root: options.e2eProjectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
            targets: {},
            tags: [],
            implicitDependencies: [options.name],
        });
        await configurationGenerator(tree, {
            project: options.e2eProjectName,
            directory: 'src',
            linter: options.linter,
            skipPackageJson: options.skipPackageJson,
            skipFormat: true,
            devServerTarget: `${options.name}:serve:development`,
            baseUrl: 'http://localhost:4200',
            rootProject: options.rootProject,
            addPlugin,
        });
    }
    else if (options.e2eTestRunner === 'playwright') {
        const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/playwright', versions_1.nxVersion);
        (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
            projectType: 'application',
            root: options.e2eProjectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
            targets: {},
            implicitDependencies: [options.name],
        });
        await configurationGenerator(tree, {
            project: options.e2eProjectName,
            skipFormat: true,
            skipPackageJson: options.skipPackageJson,
            directory: 'src',
            js: false,
            linter: options.linter,
            setParserOptionsProject: options.setParserOptionsProject,
            webServerCommand: `${(0, devkit_1.getPackageManagerCommand)().exec} nx serve ${options.name}`,
            webServerAddress: `http://localhost:${options.port ?? 4200}`,
            rootProject: options.rootProject,
            addPlugin,
        });
    }
}
exports.addE2e = addE2e;
function addFileServerTarget(tree, options, targetName) {
    (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { '@nx/web': versions_1.nxVersion });
    const { major: angularMajorVersion } = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    const isUsingApplicationBuilder = angularMajorVersion >= 17 && options.bundler === 'esbuild';
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.name);
    projectConfig.targets[targetName] = {
        executor: '@nx/web:file-server',
        options: {
            buildTarget: `${options.name}:build`,
            port: options.port,
            staticFilePath: isUsingApplicationBuilder
                ? (0, devkit_1.joinPathFragments)(options.outputPath, 'browser')
                : undefined,
            spa: true,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, options.name, projectConfig);
}
