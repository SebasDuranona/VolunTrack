"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGeneratorInternal = exports.applicationGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const init_1 = require("../init/init");
const setup_ssr_1 = require("../setup-ssr/setup-ssr");
const setup_tailwind_1 = require("../setup-tailwind/setup-tailwind");
const ensure_angular_dependencies_1 = require("../utils/ensure-angular-dependencies");
const lib_1 = require("./lib");
const log_show_project_command_1 = require("@nx/devkit/src/utils/log-show-project-command");
async function applicationGenerator(tree, schema) {
    return await applicationGeneratorInternal(tree, {
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.applicationGenerator = applicationGenerator;
async function applicationGeneratorInternal(tree, schema) {
    const options = await (0, lib_1.normalizeOptions)(tree, schema);
    const rootOffset = (0, devkit_1.offsetFromRoot)(options.appProjectRoot);
    await (0, js_1.initGenerator)(tree, {
        ...options,
        tsConfigName: options.rootProject ? 'tsconfig.json' : 'tsconfig.base.json',
        js: false,
        skipFormat: true,
    });
    await (0, init_1.angularInitGenerator)(tree, {
        ...options,
        skipFormat: true,
    });
    (0, ensure_angular_dependencies_1.ensureAngularDependencies)(tree);
    (0, lib_1.createProject)(tree, options);
    await (0, lib_1.createFiles)(tree, options, rootOffset);
    if (options.addTailwind) {
        await (0, setup_tailwind_1.setupTailwindGenerator)(tree, {
            project: options.name,
            skipFormat: true,
            skipPackageJson: options.skipPackageJson,
        });
    }
    await (0, lib_1.addLinting)(tree, options);
    await (0, lib_1.addUnitTestRunner)(tree, options);
    await (0, lib_1.addE2e)(tree, options);
    (0, lib_1.updateEditorTsConfig)(tree, options);
    (0, lib_1.setGeneratorDefaults)(tree, options);
    if (options.rootProject) {
        const nxJson = (0, devkit_1.readNxJson)(tree);
        nxJson.defaultProject = options.name;
        (0, devkit_1.updateNxJson)(tree, nxJson);
    }
    if (options.backendProject) {
        (0, lib_1.addProxyConfig)(tree, options);
    }
    if (options.strict) {
        (0, lib_1.enableStrictTypeChecking)(tree, options);
    }
    else {
        (0, lib_1.setApplicationStrictDefault)(tree, false);
    }
    if (options.ssr) {
        await (0, setup_ssr_1.setupSsr)(tree, {
            project: options.name,
            standalone: options.standalone,
        });
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return () => {
        (0, devkit_1.installPackagesTask)(tree);
        (0, log_show_project_command_1.logShowProjectCommand)(options.name);
    };
}
exports.applicationGeneratorInternal = applicationGeneratorInternal;
exports.default = applicationGenerator;
