"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateSsrSetup = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const versions_1 = require("../../../utils/versions");
const version_utils_1 = require("../../utils/version-utils");
async function updateSsrSetup(tree, { appName, port, standalone, typescriptConfiguration, }) {
    let project = (0, devkit_1.readProjectConfiguration)(tree, appName);
    tree.rename((0, devkit_1.joinPathFragments)(project.sourceRoot, 'main.server.ts'), (0, devkit_1.joinPathFragments)(project.sourceRoot, 'bootstrap.server.ts'));
    tree.write((0, devkit_1.joinPathFragments)(project.root, 'server.ts'), "import('./src/main.server');");
    const browserBundleOutput = project.targets.build.options.outputPath;
    const serverBundleOutput = project.targets.build.options.outputPath.replace(/\/browser$/, '/server');
    const { major: angularMajorVersion } = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, '../files/common', angularMajorVersion >= 17 ? 'v17+' : 'pre-v17'), project.root, {
        appName,
        browserBundleOutput,
        serverBundleOutput,
        standalone,
        tmpl: '',
    });
    const pathToTemplateFiles = typescriptConfiguration ? 'base-ts' : 'base';
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, `../files/${pathToTemplateFiles}`), project.root, {
        tmpl: '',
    });
    if (standalone) {
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/standalone'), project.root, {
            appName,
            standalone,
            tmpl: '',
        });
    }
    // update project.json
    project = (0, devkit_1.readProjectConfiguration)(tree, appName);
    project.targets.server.executor = '@nx/angular:webpack-server';
    project.targets.server.options.customWebpackConfig = {
        path: (0, devkit_1.joinPathFragments)(project.root, `webpack.server.config.${typescriptConfiguration ? 'ts' : 'js'}`),
    };
    project.targets['serve-ssr'].options = {
        ...(project.targets['serve-ssr'].options ?? {}),
        port,
    };
    project.targets['static-server'] = {
        dependsOn: ['build', 'server'],
        executor: 'nx:run-commands',
        options: {
            command: `PORT=${port} node ${(0, devkit_1.joinPathFragments)(project.targets.server.options.outputPath, 'main.js')}`,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, appName, project);
    const installTask = (0, devkit_1.addDependenciesToPackageJson)(tree, {
        cors: versions_1.corsVersion,
        '@module-federation/node': versions_1.moduleFederationNodeVersion,
    }, {
        '@types/cors': versions_1.typesCorsVersion,
    });
    return installTask;
}
exports.updateSsrSetup = updateSsrSetup;
