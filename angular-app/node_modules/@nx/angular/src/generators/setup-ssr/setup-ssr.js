"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupSsr = void 0;
const devkit_1 = require("@nx/devkit");
const version_utils_1 = require("../utils/version-utils");
const lib_1 = require("./lib");
async function setupSsr(tree, schema) {
    (0, lib_1.validateOptions)(tree, schema);
    const options = (0, lib_1.normalizeOptions)(tree, schema);
    const { targets } = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const isUsingApplicationBuilder = targets.build.executor === '@angular-devkit/build-angular:application' ||
        targets.build.executor === '@nx/angular:application';
    (0, lib_1.addDependencies)(tree, isUsingApplicationBuilder);
    (0, lib_1.generateSSRFiles)(tree, options, isUsingApplicationBuilder);
    if (!options.standalone) {
        (0, lib_1.updateAppModule)(tree, options);
    }
    if (options.hydration) {
        (0, lib_1.addHydration)(tree, options);
    }
    const { major: angularMajorVersion } = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    if (angularMajorVersion < 17 || !options.hydration) {
        (0, lib_1.setRouterInitialNavigation)(tree, options);
    }
    if (isUsingApplicationBuilder) {
        (0, lib_1.updateProjectConfigForApplicationBuilder)(tree, options);
        (0, lib_1.setServerTsConfigOptionsForApplicationBuilder)(tree, options);
    }
    else {
        (0, lib_1.updateProjectConfigForBrowserBuilder)(tree, options);
        (0, lib_1.generateTsConfigServerJsonForBrowserBuilder)(tree, options);
    }
    (0, lib_1.addServerFile)(tree, options, isUsingApplicationBuilder);
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return () => {
        (0, devkit_1.installPackagesTask)(tree);
    };
}
exports.setupSsr = setupSsr;
exports.default = setupSsr;
