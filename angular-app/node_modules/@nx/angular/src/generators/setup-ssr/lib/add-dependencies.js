"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDependencies = void 0;
const devkit_1 = require("@nx/devkit");
const semver_1 = require("semver");
const version_utils_1 = require("../../utils/version-utils");
function addDependencies(tree, isUsingApplicationBuilder) {
    const pkgVersions = (0, version_utils_1.versions)(tree);
    const { major: angularMajorVersion, version: angularVersion } = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    const dependencies = {
        '@angular/platform-server': (0, version_utils_1.getInstalledPackageVersionInfo)(tree, '@angular/platform-server')
            ?.version ?? pkgVersions.angularVersion,
        express: pkgVersions.expressVersion,
    };
    const devDependencies = {
        '@types/express': pkgVersions.typesExpressVersion,
    };
    if (angularMajorVersion >= 17) {
        dependencies['@angular/ssr'] =
            (0, version_utils_1.getInstalledPackageVersionInfo)(tree, '@angular-devkit/build-angular')
                ?.version ?? pkgVersions.angularDevkitVersion;
        if (!isUsingApplicationBuilder && (0, semver_1.gte)(angularVersion, '17.1.0')) {
            devDependencies['browser-sync'] = pkgVersions.browserSyncVersion;
        }
    }
    else {
        dependencies['@nguniversal/express-engine'] =
            (0, version_utils_1.getInstalledPackageVersionInfo)(tree, '@nguniversal/express-engine')
                ?.version ?? pkgVersions.ngUniversalVersion;
        devDependencies['@nguniversal/builders'] =
            (0, version_utils_1.getInstalledPackageVersionInfo)(tree, '@nguniversal/builders')?.version ??
                pkgVersions.ngUniversalVersion;
    }
    (0, devkit_1.addDependenciesToPackageJson)(tree, dependencies, devDependencies);
}
exports.addDependencies = addDependencies;
