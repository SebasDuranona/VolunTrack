"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addServerFile = void 0;
const devkit_1 = require("@nx/devkit");
const version_utils_1 = require("../../utils/version-utils");
const constants_1 = require("./constants");
function addServerFile(tree, schema, isUsingApplicationBuilder) {
    const { root: projectRoot, targets } = (0, devkit_1.readProjectConfiguration)(tree, schema.project);
    const { outputPath } = targets.build.options;
    const browserBundleOutputPath = isUsingApplicationBuilder
        ? getApplicationBuilderBrowserOutputPath(outputPath)
        : outputPath;
    const pathToFiles = (0, devkit_1.joinPathFragments)(__dirname, '..', 'files');
    const { major: angularMajorVersion } = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(pathToFiles, 'server', ...(isUsingApplicationBuilder
        ? ['application-builder']
        : angularMajorVersion >= 17
            ? ['server-builder', 'v17+']
            : ['server-builder', 'pre-v17'])), projectRoot, { ...schema, browserBundleOutputPath, tpl: '' });
}
exports.addServerFile = addServerFile;
function getApplicationBuilderBrowserOutputPath(outputPath) {
    if (outputPath) {
        if (typeof outputPath === 'string') {
            // when `outputPath` is a string, it's the base path, so we return the default browser path
            return constants_1.DEFAULT_BROWSER_DIR;
        }
        return outputPath.browser ?? constants_1.DEFAULT_BROWSER_DIR;
    }
    return constants_1.DEFAULT_BROWSER_DIR;
}
