"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const eslint_1 = require("@nx/eslint");
const test_runners_1 = require("../../../utils/test-runners");
async function normalizeOptions(host, schema) {
    schema.standalone = schema.standalone ?? true;
    // Create a schema with populated default values
    const options = {
        buildable: false,
        linter: eslint_1.Linter.EsLint,
        publishable: false,
        simpleName: false,
        skipFormat: false,
        unitTestRunner: test_runners_1.UnitTestRunner.Jest,
        // Publishable libs cannot use `full` yet, so if its false then use the passed value or default to `full`
        compilationMode: schema.publishable
            ? 'partial'
            : schema.compilationMode ?? 'full',
        skipModule: schema.skipModule || schema.standalone,
        ...schema,
    };
    const { projectName, names: projectNames, projectRoot, importPath, } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(host, {
        name: options.name,
        projectType: 'library',
        directory: options.directory,
        importPath: options.importPath,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        callingGenerator: '@nx/angular:library',
    });
    const fileName = options.simpleName
        ? projectNames.projectSimpleName
        : projectNames.projectFileName;
    const moduleName = `${(0, devkit_1.names)(fileName).className}Module`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const modulePath = `${projectRoot}/src/lib/${fileName}.module.ts`;
    const ngCliSchematicLibRoot = projectName;
    const allNormalizedOptions = {
        ...options,
        linter: options.linter ?? eslint_1.Linter.EsLint,
        unitTestRunner: options.unitTestRunner ?? test_runners_1.UnitTestRunner.Jest,
        prefix: options.prefix ?? 'lib',
        name: projectName,
        projectRoot,
        entryFile: 'index',
        moduleName,
        modulePath,
        parsedTags,
        fileName,
        importPath,
        ngCliSchematicLibRoot,
        standaloneComponentName: `${(0, devkit_1.names)(projectNames.projectSimpleName).className}Component`,
    };
    const { displayBlock, inlineStyle, inlineTemplate, viewEncapsulation, changeDetection, style, skipTests, selector, skipSelector, flat, ...libraryOptions } = allNormalizedOptions;
    return {
        libraryOptions,
        componentOptions: {
            name: fileName,
            standalone: libraryOptions.standalone,
            displayBlock,
            inlineStyle,
            inlineTemplate,
            viewEncapsulation,
            changeDetection,
            style,
            skipTests,
            selector,
            skipSelector,
            flat,
        },
    };
}
exports.normalizeOptions = normalizeOptions;
