"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.versions = exports.addDependenciesToPackageJsonIfDontExist = exports.getInstalledPackageVersionInfo = exports.getInstalledPackageVersion = exports.getInstalledAngularVersionInfo = exports.getInstalledAngularMajorVersion = exports.getInstalledAngularVersion = void 0;
const devkit_1 = require("@nx/devkit");
const semver_1 = require("semver");
const backward_compatible_versions_1 = require("../../utils/backward-compatible-versions");
const latestVersions = require("../../utils/versions");
const versions_1 = require("../../utils/versions");
function getInstalledAngularVersion(tree) {
    const pkgJson = (0, devkit_1.readJson)(tree, 'package.json');
    const installedAngularVersion = pkgJson.dependencies && pkgJson.dependencies['@angular/core'];
    if (!installedAngularVersion ||
        installedAngularVersion === 'latest' ||
        installedAngularVersion === 'next') {
        return (0, semver_1.clean)(versions_1.angularVersion) ?? (0, semver_1.coerce)(versions_1.angularVersion).version;
    }
    return ((0, semver_1.clean)(installedAngularVersion) ?? (0, semver_1.coerce)(installedAngularVersion).version);
}
exports.getInstalledAngularVersion = getInstalledAngularVersion;
function getInstalledAngularMajorVersion(tree) {
    return (0, semver_1.major)(getInstalledAngularVersion(tree));
}
exports.getInstalledAngularMajorVersion = getInstalledAngularMajorVersion;
function getInstalledAngularVersionInfo(tree) {
    const installedVersion = getInstalledAngularVersion(tree);
    return {
        version: installedVersion,
        major: (0, semver_1.major)(installedVersion),
    };
}
exports.getInstalledAngularVersionInfo = getInstalledAngularVersionInfo;
function getInstalledPackageVersion(tree, pkgName) {
    const { dependencies, devDependencies } = (0, devkit_1.readJson)(tree, 'package.json');
    const version = dependencies?.[pkgName] ?? devDependencies?.[pkgName];
    return version;
}
exports.getInstalledPackageVersion = getInstalledPackageVersion;
function getInstalledPackageVersionInfo(tree, pkgName) {
    const version = getInstalledPackageVersion(tree, pkgName);
    return version ? { major: (0, semver_1.major)((0, semver_1.coerce)(version)), version } : null;
}
exports.getInstalledPackageVersionInfo = getInstalledPackageVersionInfo;
function addDependenciesToPackageJsonIfDontExist(tree, dependencies, devDependencies, packageJsonPath = 'package.json') {
    const packageJson = (0, devkit_1.readJson)(tree, packageJsonPath);
    function filterExisting(deps) {
        return Object.keys(deps)
            .filter((d) => !packageJson.dependencies?.[d] && !packageJson.devDependencies?.[d])
            .reduce((acc, d) => ({ ...acc, [d]: deps[d] }), {});
    }
    const depsToAdd = filterExisting(dependencies);
    const devDepsToAdd = filterExisting(devDependencies);
    return (0, devkit_1.addDependenciesToPackageJson)(tree, depsToAdd, devDepsToAdd, packageJsonPath);
}
exports.addDependenciesToPackageJsonIfDontExist = addDependenciesToPackageJsonIfDontExist;
function versions(tree) {
    const majorAngularVersion = getInstalledAngularMajorVersion(tree);
    switch (majorAngularVersion) {
        case 15:
            return backward_compatible_versions_1.backwardCompatibleVersions.angularV15;
        case 16:
            return backward_compatible_versions_1.backwardCompatibleVersions.angularV16;
        default:
            return latestVersions;
    }
}
exports.versions = versions;
