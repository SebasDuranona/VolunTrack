"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpackInitGeneratorInternal = exports.webpackInitGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const update_package_scripts_1 = require("@nx/devkit/src/utils/update-package-scripts");
const plugin_1 = require("../../plugins/plugin");
const versions_1 = require("../../utils/versions");
function webpackInitGenerator(tree, schema) {
    return webpackInitGeneratorInternal(tree, { addPlugin: false, ...schema });
}
exports.webpackInitGenerator = webpackInitGenerator;
async function webpackInitGeneratorInternal(tree, schema) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const addPluginDefault = process.env.NX_ADD_PLUGINS !== 'false' &&
        nxJson.useInferencePlugins !== false;
    schema.addPlugin ??= addPluginDefault;
    if (schema.addPlugin) {
        addPlugin(tree);
    }
    let installTask = () => { };
    if (!schema.skipPackageJson) {
        const devDependencies = {
            '@nx/webpack': versions_1.nxVersion,
            '@nx/web': versions_1.nxVersion,
        };
        if (schema.addPlugin) {
            devDependencies['webpack-cli'] = versions_1.webpackCliVersion;
        }
        installTask = (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDependencies, undefined, schema.keepExistingVersions);
    }
    if (schema.updatePackageScripts) {
        await (0, update_package_scripts_1.updatePackageScripts)(tree, plugin_1.createNodes);
    }
    if (!schema.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return installTask;
}
exports.webpackInitGeneratorInternal = webpackInitGeneratorInternal;
function addPlugin(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    nxJson.plugins ??= [];
    for (const plugin of nxJson.plugins) {
        if (typeof plugin === 'string'
            ? plugin === '@nx/webpack/plugin'
            : plugin.plugin === '@nx/webpack/plugin') {
            return;
        }
    }
    nxJson.plugins.push({
        plugin: '@nx/webpack/plugin',
        options: {
            buildTargetName: 'build',
            serveTargetName: 'serve',
            previewTargetName: 'preview',
        },
    });
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
exports.default = webpackInitGenerator;
