"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readWebpackOptions = void 0;
const devkit_1 = require("@nx/devkit");
const config_1 = require("../config");
/**
 * Reads the webpack options from a give webpack configuration. The configuration can be:
 * 1. A standard config object
 * 2. A standard function that returns a config object (webpack.js.org/configuration/configuration-types/#exporting-a-function)
 * 3. A Nx-specific composable function that takes Nx context, webpack config, and returns the config object.
 *
 * @param webpackConfig
 */
async function readWebpackOptions(webpackConfig) {
    let config;
    if ((0, config_1.isNxWebpackComposablePlugin)(webpackConfig)) {
        config = await webpackConfig({}, {
            // These values are only used during build-time, so passing stubs here just to read out
            // the returned config object.
            options: {
                root: devkit_1.workspaceRoot,
                projectRoot: '',
                sourceRoot: '',
                outputFileName: undefined,
                outputPath: undefined,
                assets: undefined,
            },
            context: { root: devkit_1.workspaceRoot, cwd: undefined, isVerbose: false },
        });
    }
    else if (typeof webpackConfig === 'function') {
        config = await webpackConfig({
            production: true, // we want the production build options
        }, {});
    }
    else {
        config = webpackConfig;
    }
    return config;
}
exports.readWebpackOptions = readWebpackOptions;
